// Start all as parallel
    
    const interval1$ - interval(1000);
    const interval2$ - interval1$.pipe(map(val => 10* val));

    const result$ = merge(interval1$, interval2$);

    result$.subscribe(console.log);

///////////////////////

    this.form.valueChanges.pipe(
      filter(() => this.form.valid),
      mergeMap(changes => this.saveCourse(changes))
    )
    .subscribe();

    saveCourse(changes) {
      return fromPromise(fetch('/api/courses/${this.course.id}'),
      {
        method: 'PUT',
        body: JSON.stringify(changes),
        headers: {
          'content-type' : 'application/json';
        }
      });
    }

   //forkJoin - When all observables complete, emit the last emitted value from each.